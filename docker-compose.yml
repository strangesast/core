version: '3.7'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "input-text:4:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      restart: always
    volumes:
      - kafka_data:/kafka 

  connect:
    image: strangesast/core_connect
    build:
      context: .
      dockerfile: docker/kafka-connect/Dockerfile
    restart: always
    depends_on:
      - 'kafka'

  kafka-streams:
    image: strangesast/core_kafka-streams
    build:
      context: .
      dockerfile: docker/kafka-streams/Dockerfile
    environment:
      - KAFKA_HOSTS=kafka:9092
      - STREAMS_APPLICATION_ID=streams-monitoring
    restart: always
    depends_on:
      - 'kafka'

  connector0:
    image: strangesast/core_connector
    build:
      context: .
      dockerfile: docker/machine-injest-raw/Dockerfile
    environment:
      - MACHINE_ID=hardinge-gx1600
      - KAFKA_HOSTS=kafka:9092
      - ADAPTER_HOST=10.0.0.101:7878
    restart: always
    depends_on:
      - 'kafka'

  connector1:
    image: strangesast/core_connector
    build:
      context: .
      dockerfile: docker/machine-injest-raw/Dockerfile
    environment:
      - MACHINE_ID=samsung-sl45
      - KAFKA_HOSTS=kafka:9092
      - ADAPTER_HOST=10.0.0.101:7879
    restart: always
    depends_on:
      - 'kafka'

  connector2:
    image: strangesast/core_connector
    build:
      context: .
      dockerfile: docker/machine-injest-raw/Dockerfile
    environment:
      - MACHINE_ID=doosan-2600sy
      - KAFKA_HOSTS=kafka:9092
      - ADAPTER_HOST=10.0.0.101:7880
    restart: always
    depends_on:
      - 'kafka'

  connector3:
    image: strangesast/core_connector
    build:
      context: .
      dockerfile: docker/machine-injest-raw/Dockerfile
    environment:
      - MACHINE_ID=doosan-gt2100m
      - KAFKA_HOSTS=kafka:9092
      - ADAPTER_HOST=10.0.0.101:7881
    restart: always
    depends_on:
      - 'kafka'

  connector4:
    image: strangesast/core_connector
    build:
      context: .
      dockerfile: docker/machine-injest-raw/Dockerfile
    environment:
      - MACHINE_ID=samsung-mcv50
      - KAFKA_HOSTS=kafka:9092
      - ADAPTER_HOST=10.0.0.101:7882
    restart: always
    depends_on:
      - 'kafka'

  timeclock:
    image: strangesast/core_timeclock
    build:
      context: .
      dockerfile: docker/timeclock/Dockerfile
    environment:
      - MYSQL_HOST=10.0.0.62
      - AMG_HOST=10.0.0.62
      - AMG_PORT=3003
      - AMG_USER=admin
    restart: always
    depends_on:
      - 'postgres'
    volumes:
      - ./timeclock/config.ini:/app/config.ini

  server:
    image: strangesast/core_server
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    restart: always
    environment:
      NODE_CONFIG: '{"secret":"secretSECRETsecretSECRETsecretSECRET", "port": 80, "postgres": {"connectionString": "postgres://postgres:password@postgres:5432/production"}}'

  client:
    image: strangesast/core_client
    build:
      context: .
      dockerfile: docker/client/Dockerfile
    restart: always
    ports:
      - "80:80"

  graphql-engine:
    image: hasura/graphql-engine:latest
    depends_on:
    - "postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: "postgres://postgres:password@postgres:5432/production"
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup, http-log, webhook-log, websocket-log, query-log"
      HASURA_GRAPHQL_ENABLED_APIS: "metadata, graphql, pgdump"
      HASURA_GRAPHQL_ADMIN_SECRET: secretSECRETsecretSECRETsecretSECRET
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "HS256", "key": "secretSECRETsecretSECRETsecretSECRET"}'
      HASURA_GRAPHQL_CORS_DOMAIN: "*"

  hasura-metadata:
    image: hasura/graphql-engine:latest.cli-migrations-v2
    volumes:
      - ./hasura/migrations:/hasura-migrations
      - ./hasura/metadata:/hasura-metadata
    environment:
      HASURA_GRAPHQL_DATABASE_URL: "postgres://postgres:password@postgres:5432/production"

  postgres:
    image: postgres
    restart: always
    volumes:
      - ./sql/:/docker-entrypoint-initdb.d/
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin
      - PGADMIN_DEFAULT_PASSWORD=password
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  db_data:
    external: true
    name: core_prod_db_data
  kafka_data:
    external: true
    name: core_prod_kafka_data
  pgadmin_data:
